import pytest
import sys

from Bio.Seq import Seq
from pathlib import Path

BINDER_DIR = Path(__file__).parents[1] / 'src'
sys.path.insert(1, str(BINDER_DIR))

from classes import Binder


def test_empty_seq():
    seq = ''
    binder = Binder(seq)
    assert binder.seq == None
    assert binder.rfs == []
        
def test_nt_seq():
    seq = '''
            CAAAAACGTCTCAGGCAAGAAGGAGCACCGGCATGAAATACCTATTGCCTACGGCAGCCGCTGGATTGTTA
             TTACTCGCGGCCCAGCCGGCCATGGCCGAGGTGCAGCTGTTGGAGTCTGGGGGAGGCTTGGTACAGCCTGG
             GGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTTAGCAGCTATGCCATGAGCTGGGTCCGCC
             AGGCTCCAGGGAAGGGGCTGGAGTGGGTGTCAGCTATTAGTGGTAGTGGTGGTAGCACATACTACGCAGAC
             TCCGTGAAGGGCCGGTTCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCT
             GAGAGCCGAGGACACGGCCGTATATTACTGTGCGAGGAAGTGGAGCAAGACCGGGTTCGACTATTGGGGCC
             AGGGAACCCTGGTCACCGTGTCCTCACGTGGAGGCGGTTCAAGCGGATGTGGCAGCGGCGGTGGCGGGTCG
             ACAGAAATTGTGTTGACGCAGTCTCCAGGCACCCTGTCTTTGTCTCCAGGGGAAAGAGCCACCCTCTCCTG
             CACGGCCAGTCAGAGTGTTAGCAGCAGCTACTTAGCCTGGTACCAGCAGAAACCTGGCCAGGCTCCCAGGC
             TCCTCATCTATGGTGCATCCAGCAGGGCCACTGGCATCCCAGACAGGTTCAGTGGCAGTGGGTCTGGAACA
             GACTTCACTCTCACCATCAGCAGACTGGAGCCTGAAGATTTTGCAGTGTATTACTGTCAGCAATTGTATAC
             GTTGTAGTTGACTTTTGGCCTGTGGACCAAGCTGGAGATCTATACGAGCGGCCGCAGAGGCCGCAGAACAA
             AAAACTCGTCTCAGAAGACGATCTGGGAAAACCCCGGTTGCCGACGGATTCTACTGTTTGAAACTTGTTTA
             GGAAAACCCTCATACTGAAAATTCATTTACCAAACCCCTGGAAAGAAAGACTAAACTTTATAATCGTTTCG
             CCTAAACTATCAAGGCTTTTCTATGGAAAAGCTAACAAGCCTTGGGGTTTGTACTGAGGGACAAAAACCCC
             TATTTTATGAAACAGGGGACCAAATTTGGGTTTTCCAACCCCCAAAAAATAAAGGGGGGGGGTTTCTCAAA
             CGGGTGAAAATTTCTGAGAGGGGGCCTTTTTGAGGAAGGGGGCGGTATAAAAAAAACCCCCCCGTAGAAAA
             GGGGGAAACCTCAATATCCGCGGGAATAATTTTATATAACCCCTTTTCCGGGGGTTTTTTTTCTCTTGGGT
             CTTTTGAAAAAA
             '''
             
    final_seq = '''
             GCGGCCCAGCCGGCCATGGCCGAGGTGCAGCTGTTGGAGTCTGGGGGAGGCTTGGTACAGCCTGGGGGGTC
             CCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTTAGCAGCTATGCCATGAGCTGGGTCCGCCAGGCTC
             CAGGGAAGGGGCTGGAGTGGGTGTCAGCTATTAGTGGTAGTGGTGGTAGCACATACTACGCAGACTCCGTG
             AAGGGCCGGTTCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCTGAGAGC
             CGAGGACACGGCCGTATATTACTGTGCGAGGAAGTGGAGCAAGACCGGGTTCGACTATTGGGGCCAGGGAA
             CCCTGGTCACCGTGTCCTCACGTGGAGGCGGTTCAAGCGGATGTGGCAGCGGCGGTGGCGGGTCGACAGAA
             ATTGTGTTGACGCAGTCTCCAGGCACCCTGTCTTTGTCTCCAGGGGAAAGAGCCACCCTCTCCTGCACGGC
             CAGTCAGAGTGTTAGCAGCAGCTACTTAGCCTGGTACCAGCAGAAACCTGGCCAGGCTCCCAGGCTCCTCA
             TCTATGGTGCATCCAGCAGGGCCACTGGCATCCCAGACAGGTTCAGTGGCAGTGGGTCTGGAACAGACTTC
             ACTCTCACCATCAGCAGACTGGAGCCTGAAGATTTTGCAGTGTATTACTGTCAGCAATTGTATACGTTGTA
             GTTGACTTTTGGCCTGTGGACCAAGCTGGAGATCTATACGAGCGGCCGCAGAGGCCGCAGAACAAAAAACT
             CGTCTCA
             '''

    final_rfs = [Seq('FTFSSYAMS'),
                 Seq('SAISGSGGSTYYA'),
                 Seq('ARKWSKTGFDY'),
                 Seq('CTASQSVSSSYLA'),
                 Seq('GASSRAT'),
                 Seq('QQLYTL*LT'),
                ]
    binder = Binder(seq)
    assert binder.seq == final_seq
    assert binder.rfs == final_rfs